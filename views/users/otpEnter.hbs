<style>
  @import url('https://fonts.googleapis.com/css2?family=Lemon&family=Lilita+One&display=swap');

  body {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
  }

  .login-container {
    background-color: #fff;
    padding: 20px;
    padding-bottom: 30px;
    text-align: center;

  }

  .login-container label {
    text-align: left;
    display: block;
    margin-bottom: 5px;
  }

  .login-container input {
    background-color: #f9f9f9;
    /* Background color for input fields */
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 30px;
    width: 100%;
    box-sizing: border-box;
  }

  .button-text {
    text-align: left;
    margin-top: 15px;
    margin-bottom: 6px;
    font-size: 13px;
  }

  .btn {
    padding: .375rem 8.75rem;
    border-radius: 30px;
    font-family: 'Lemon', serif;
  }

  .logo {
    margin: auto;
    max-width: 199px;
    margin-bottom: 15px;
  }

  #login-form {
    background-color: rgba(229, 229, 229, 1);
    padding: 50px 70px;
    border-radius: 30px;
  }

  .disabled-link {
    pointer-events: none;
    color: rgb(175, 175, 175);
    background: rgba(236, 236, 236, 0.853);
    border: none;
  }

  .active-link {
    cursor: pointer;
    border: none;
  }

  .second_form {
    background-color: rgba(229, 229, 229, 1);
    padding: 50px 70px;
    border-radius: 30px;
  }

  @media (min-width: 768px) and (max-width: 992px) {
    .btn {
      padding: .375rem 5.75rem
    }
  }
</style>
<div class="container">
  {{#if message}}
  <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert" style="margin-top: 80px !important;">
    <button class="btn-close" type="button" data-bs-dismiss="alert" aria-label="close"></button>
    <strong>Failed:</strong>
    {{message.message}}
  </div>
  {{/if}}
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="login-container">
        <img src="/images/logo.png" alt="Logo" class="logo">
        <form id="login-form" action="/emails/otp" method="post">
          <p style="font-size: 20px;">We've sent a one time password (OTP) to your Email.Please enter it to complete
            verification</p>
          <!-- Password Input -->
          <div class="form-group-container">
            <div class="form-group">
              <label for="password">Enter OTP</label>
              <input type="number" class="form-control" id="Number" name="Number" required style="border-radius: 0px;">
            </div>
          </div>
          <button type="submit" class="btn btn-warning" id="login-button"
            style="color: black; margin-bottom:20px">Continue</button>

          <p style="color: green; text-align: center; margin-top: 30px;" id="otpTimer"></p>
        </form>
        <form action="/emails/resendOtp" method="post">
          <button id="resendButton" class="btn btn-primary mt-3" type="submit">
            Resend
          </button>

        </form>
      </div>
    </div>
  </div>
</div>

<script>
  let resendButton = document.getElementById('resendButton');
  let expirationTime;

  // Retrieve expiration time from session storage
  const storedExpirationTime = sessionStorage.getItem('expirationTime');
  if (storedExpirationTime) {
    expirationTime = parseInt(storedExpirationTime, 10);
  } else {
    expirationTime = new Date().getTime() + 60 * 1000; // Set initial expiration time
    sessionStorage.setItem('expirationTime', expirationTime);
  }

  function updateTimer() {
    const currentTime = new Date().getTime();
    let timerElement = document.getElementById('otpTimer');

    function update() {
      let timeLeft = Math.max(0, Math.floor((expirationTime - new Date().getTime()) / 1000)); // in seconds

      if (timeLeft > 0) {
        timerElement.innerText = `${timeLeft} seconds`;
        resendButton.classList.remove('active-link');
        resendButton.classList.add('disabled-link');
        setTimeout(update, 1000);
      } else {
        timerElement.innerText = ' OTP Expired';
        resendButton.classList.remove('disabled-link');
        resendButton.classList.add('active-link');
      }
    }

    update();
  }

  // Event listener for the click event on the resend button
  resendButton.addEventListener('click', function () {
    // Reset expiration time to start a new countdown
    expirationTime = new Date().getTime() + 60 * 1000;
    // Update session storage with the new expiration time
    sessionStorage.setItem('expirationTime', expirationTime);
    // Restart the timer
    updateTimer();
  });

  // Initial call to start the timer
  updateTimer();

</script>